import React, { useState } from "react";
import {
  View,
  Text,
  TextInput,
  Button,
  ActivityIndicator,
  StyleSheet,
  ScrollView,
} from "react-native";

export default function TabOneScreen() {
  const [city, setCity] = useState("");
  const [preferences, setPreferences] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [apiStatus, setApiStatus] = useState("");
  const [routePoints, setRoutePoints] = useState<any[]>([]);
  const [modalVisible, setModalVisible] = useState(false);

  const generateRoute = async () => {
    if (!city.trim()) {
      setError("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥");
      return;
    }

    setLoading(true);
    setError("");
    setApiStatus("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ AI —á–µ—Ä–µ–∑ backend...");

    try {
      setApiStatus("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ backend...");

      const response = await fetch("http://localhost:3000/api/route", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ city, preferences }),
      });

      setApiStatus("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç AI...");

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      console.log("üì® –û—Ç–≤–µ—Ç backend:", JSON.stringify(data, null, 2));

      let resultText: string | undefined =
        data?.result?.alternatives?.[0]?.message?.text;

      if (!resultText) throw new Error("AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");

      resultText = resultText.trim();

      if (resultText.startsWith("```")) {
        resultText = resultText.replace(/```json|```/g, "").trim();
      }

      const match = resultText.match(/\{[\s\S]*\}/);
      if (!match) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ AI");

      const parsedResult = JSON.parse(match[0]);

      if (Array.isArray(parsedResult.route)) {
        setRoutePoints(parsedResult.route);
        setModalVisible(false);
        setApiStatus("‚úÖ –ú–∞—Ä—à—Ä—É—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é AI!");
      } else {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç AI");
      }
    } catch (err) {
      const errorMessage =
        err instanceof Error ? err.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      console.error("‚ùå –û—à–∏–±–∫–∞ AI:", err);
      setError(`–û—à–∏–±–∫–∞ AI: ${errorMessage}`);
      setApiStatus("‚ùå AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
    } finally {
      setLoading(false);
    }
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text style={styles.label}>–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:</Text>
      <TextInput
        value={city}
        onChangeText={setCity}
        placeholder="–ú–æ—Å–∫–≤–∞"
        style={styles.input}
      />

      <Text style={styles.label}>–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</Text>
      <TextInput
        value={preferences}
        onChangeText={setPreferences}
        placeholder="–º—É–∑–µ–∏, –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π"
        style={styles.input}
      />

      <View style={styles.buttonContainer}>
        <Button title="–°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç" onPress={generateRoute} />
      </View>

      {loading && <ActivityIndicator size="large" color="#007AFF" />}
      {error ? <Text style={styles.error}>{error}</Text> : null}
      {apiStatus ? <Text style={styles.status}>{apiStatus}</Text> : null}

      {routePoints.length > 0 && (
        <View style={styles.routeContainer}>
          <Text style={styles.routeTitle}>üìç –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:</Text>
          {routePoints.map((point, index) => (
            <Text key={index} style={styles.routePoint}>
              {`${index + 1}. ${point.name} ‚Äî ${point.description}`}
            </Text>
          ))}
        </View>
      )}
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    flexGrow: 1,
    padding: 20,
    backgroundColor: "#F9F9F9",
  },
  label: {
    fontSize: 16,
    fontWeight: "600",
    marginBottom: 6,
    color: "#333",
  },
  input: {
    borderWidth: 1,
    borderColor: "#CCC",
    borderRadius: 8,
    padding: 10,
    marginBottom: 15,
    backgroundColor: "#FFF",
  },
  buttonContainer: {
    marginBottom: 20,
  },
  error: {
    color: "red",
    marginTop: 10,
    fontWeight: "500",
  },
  status: {
    marginTop: 10,
    color: "#555",
  },
  routeContainer: {
    marginTop: 25,
    padding: 15,
    borderWidth: 1,
    borderColor: "#DDD",
    borderRadius: 10,
    backgroundColor: "#FFF",
  },
  routeTitle: {
    fontSize: 18,
    fontWeight: "700",
    marginBottom: 10,
  },
  routePoint: {
    fontSize: 15,
    marginBottom: 6,
  },
});
